package com.example.inspiretool

import android.content.Context
import android.graphics.*
import android.util.AttributeSet
import androidx.appcompat.widget.AppCompatImageView

class CropImageView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : AppCompatImageView(context, attrs, defStyleAttr) {

    var cropRect = RectF()
    var showCropOverlay = false
        set(value) {
            field = value
            invalidate()
        }

    private val overlayPaint = Paint().apply {
        color = Color.BLACK
        alpha = 128 // Semi-transparent
    }

    private val cropBorderPaint = Paint().apply {
        color = Color.WHITE
        strokeWidth = 4f
        style = Paint.Style.STROKE
    }

    private val cornerPaint = Paint().apply {
        color = Color.WHITE
        style = Paint.Style.FILL
    }

    private val gridPaint = Paint().apply {
        color = Color.WHITE
        strokeWidth = 2f
        style = Paint.Style.STROKE
        alpha = 180
    }

    private val cornerSize = 20f

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)

        if (showCropOverlay && canvas != null) {
            drawCropOverlay(canvas)
        }
    }

    private fun drawCropOverlay(canvas: Canvas) {
        val viewWidth = width.toFloat()
        val viewHeight = height.toFloat()

        // Draw semi-transparent overlay outside crop area
        // Top
        canvas.drawRect(0f, 0f, viewWidth, cropRect.top, overlayPaint)
        // Bottom
        canvas.drawRect(0f, cropRect.bottom, viewWidth, viewHeight, overlayPaint)
        // Left
        canvas.drawRect(0f, cropRect.top, cropRect.left, cropRect.bottom, overlayPaint)
        // Right
        canvas.drawRect(cropRect.right, cropRect.top, viewWidth, cropRect.bottom, overlayPaint)

        // Draw crop rectangle border
        canvas.drawRect(cropRect, cropBorderPaint)

        // Draw grid lines (rule of thirds)
        val cropWidth = cropRect.width()
        val cropHeight = cropRect.height()

        // Vertical grid lines
        val verticalLine1 = cropRect.left + cropWidth / 3
        val verticalLine2 = cropRect.left + (cropWidth * 2) / 3
        canvas.drawLine(verticalLine1, cropRect.top, verticalLine1, cropRect.bottom, gridPaint)
        canvas.drawLine(verticalLine2, cropRect.top, verticalLine2, cropRect.bottom, gridPaint)

        // Horizontal grid lines
        val horizontalLine1 = cropRect.top + cropHeight / 3
        val horizontalLine2 = cropRect.top + (cropHeight * 2) / 3
        canvas.drawLine(cropRect.left, horizontalLine1, cropRect.right, horizontalLine1, gridPaint)
        canvas.drawLine(cropRect.left, horizontalLine2, cropRect.right, horizontalLine2, gridPaint)

        // Draw corner handles
        drawCornerHandle(canvas, cropRect.left, cropRect.top) // Top-left
        drawCornerHandle(canvas, cropRect.right, cropRect.top) // Top-right
        drawCornerHandle(canvas, cropRect.left, cropRect.bottom) // Bottom-left
        drawCornerHandle(canvas, cropRect.right, cropRect.bottom) // Bottom-right
    }

    private fun drawCornerHandle(canvas: Canvas, x: Float, y: Float) {
        // Draw corner square
        val halfSize = cornerSize / 2
        canvas.drawRect(
            x - halfSize,
            y - halfSize,
            x + halfSize,
            y + halfSize,
            cornerPaint
        )

        // Draw corner border
        canvas.drawRect(
            x - halfSize,
            y - halfSize,
            x + halfSize,
            y + halfSize,
            cropBorderPaint
        )
    }
}