package com.example.inspiretool

import android.annotation.SuppressLint
import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity

class ProfileActivity : AppCompatActivity() {

    private lateinit var listView: ListView
    private lateinit var dbHelper: DatabaseHelper
    private lateinit var adapter: ArrayAdapter<String>
    private var userList = mutableListOf<User>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_profile)

        listView = findViewById(R.id.listViewUsers)
        dbHelper = DatabaseHelper(this)

        loadUsers()

        // Find the logout button and set click listener here
        val logoutButton = findViewById<androidx.cardview.widget.CardView>(R.id.logoutButton)
        logoutButton.setOnClickListener {
            // Navigate to MainActivity and clear the activity stack
            val intent = Intent(this, MainActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(intent)
            finish()
        }
    }

    private fun loadUsers() {
        userList = dbHelper.getAllUsers().toMutableList()
        val displayList = userList.map { "${it.name} (${it.email})" }

        adapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, displayList)
        listView.adapter = adapter

        listView.setOnItemClickListener { _, _, position, _ ->
            val selectedUser = userList[position]
            showUserOptionsDialog(selectedUser)
        }
    }

    private fun showUserOptionsDialog(user: User) {
        val options = arrayOf("Update", "Delete")

        AlertDialog.Builder(this)
            .setTitle("Select Action")
            .setItems(options) { _, which ->
                when (which) {
                    0 -> showUpdateDialog(user)
                    1 -> confirmDelete(user)
                }
            }
            .show()
    }

    @SuppressLint("MissingInflatedId")
    private fun showUpdateDialog(user: User) {
        val view = LayoutInflater.from(this).inflate(R.layout.dialog_update_user, null)
        val etName = view.findViewById<EditText>(R.id.etUpdateName)
        val etEmail = view.findViewById<EditText>(R.id.etUpdateEmail)
        val etPassword = view.findViewById<EditText>(R.id.etNewPassword)

        etName.setText(user.name)
        etEmail.setText(user.email)
        etPassword.setText(user.password)

        AlertDialog.Builder(this)
            .setTitle("Update User")
            .setView(view)
            .setPositiveButton("Update") { _, _ ->
                val newName = etName.text.toString().trim()
                val newEmail = etEmail.text.toString().trim()
                val newPassword = etPassword.text.toString().trim()

                if (newName.isNotEmpty() && newEmail.isNotEmpty() && newPassword.isNotEmpty()) {
                    val success = dbHelper.updateUser(user.id, newName, newEmail, newPassword)
                    if (success) {
                        Toast.makeText(this, "User Updated", Toast.LENGTH_SHORT).show()
                        loadUsers()
                    } else {
                        Toast.makeText(this, "Update Failed", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(this, "Fields cannot be empty", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun confirmDelete(user: User) {
        AlertDialog.Builder(this)
            .setTitle("Confirm Delete")
            .setMessage("Are you sure you want to delete ${user.name}?")
            .setPositiveButton("Delete") { _, _ ->
                val success = dbHelper.deleteUser(user.id)
                if (success) {
                    Toast.makeText(this, "User Deleted", Toast.LENGTH_SHORT).show()
                    loadUsers()
                } else {
                    Toast.makeText(this, "Delete Failed", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }
}
